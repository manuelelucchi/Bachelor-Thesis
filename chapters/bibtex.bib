% Encoding: UTF-8

% .NET
@misc{dotnet,
  author       = {{Microsoft}},
  howpublished = {\url{https://dotnet.microsoft.com/}},
  title        = {.NET Platform},
  year         = {2021}
}

% C#
@misc{csharp,
  author       = {{Microsoft}},
  howpublished = {\url{https://dotnet.microsoft.com/languages/csharp}},
  title        = {C\# Programming Language},
  year         = {2021}
}


% XML
@misc{xml,
  organization = {{World Wide Web Consortium (W3C)}},
  title        = {{Extensible Markup Language (XML) 1.0}},
  author       = {{Tim Bray, Jean Paoli, C. M. Sperberg-McQueen, Eve Maler,François Yergeau}},
  language     = {English},
  howpublished = {\url{https://www.w3.org/TR/xml/}},
  year         = {2008},
  abstract     = {The Extensible Markup Language (XML) is a subset of SGML that is completely described in this document. Its goal is to enable generic SGML to be served, received, and processed on the Web in the way that is now possible with HTML. XML has been designed for ease of implementation and for interoperability with both SGML and HTML.}
}

Windows Server
@misc{windowsserver,
  author       = {{Microsoft}},
  howpublished = {\url{https://www.microsoft.com/it-it/sql-server/sql-server-2019}},
  title        = {SQL Server},
  year         = {2021}
}

% IEC 62304
@misc{iec62304,
  organization = {{International Electrotechnical Commission (IEC)}},
  title        = {{IEC 62304:2006}},
  author       = {{IEC}},
  language     = {English},
  howpublished = {\url{https://www.iso.org/standard/38421.html}},
  year         = {2006},
  abstract     = {Defines the life cycle requirements for medical device software. The set of processes, activities, and tasks described in this standard establishes a common framework for medical device software life cycle processes.}
}

% REST
@phdthesis{rest,
  author = {{Roy Thomas Fielding}},
  title  = {{Architectural Styles and the Design of Network-based Software Architectures}},
  school = {University of California, Irvine},
  year   = {2000}
}

% WPF
@misc{wpf,
  author       = {{Microsoft}},
  howpublished = {\url{https://docs.microsoft.com/en-us/dotnet/desktop/wpf}},
  title        = {Windows Presentation Foundation documentation},
  year         = {2021}
}

% CIL
@misc{cil,
  organization = {{Microsoft}},
  title        = {{Information technology — Common Language Infrastructure (CLI)}},
  author       = {{Microsoft}},
  language     = {English},
  howpublished = {\url{https://www.iso.org/standard/58046.html}},
  year         = {2012},
  abstract     = {ISO/IEC 23271:2012 defines the Common Language Infrastructure (CLI) in which applications written in multiple high-level languages can be executed in different system environments without the need to rewrite those applications to take into consideration the unique characteristics of those environments.}
}

% Recurisve Pattern Matching
@misc{recursivepatterns,
  title        = {{Recursive Pattern Matching}},
  author       = {{Microsoft}},
  howpublished = {\url{https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-8.0/patterns}},
  year         = {2019}
}

% Nullable Reference Types
@misc{nullable,
  title        = {{Nullable reference types}},
  author       = {{Microsoft}},
  howpublished = {\url{https://docs.microsoft.com/en-us/dotnet/csharp/nullable-references}},
  year         = {2021}
}

% Xaml
@misc{xaml,
  title        = {{Xaml Object Mapping Specification}},
  author       = {{Microsoft}},
  howpublished = {\url{https://github.com/Microsoft/xaml-standard}},
  year         = {2006}
}

% MVVM
@misc{mvvm,
  author       = {{Microsoft}},
  title        = {{The Model-View-ViewModel Pattern}},
  howpublished = {\url{https://docs.microsoft.com/en-us/xamarin/xamarin-forms/enterprise-application-patterns/mvvm}},
  year         = {2016}
}

% EFCore
@misc{efcore,
  author       = {{Microsoft}},
  title        = {{Entity Framework Core}},
  howpublished = {\url{https://docs.microsoft.com/en-us/ef/core/}},
  year         = {2020}
}

% Linq
@misc{linq,
  title        = {{Language Integrated Query (LINQ)}},
  author       = {{Microsoft}},
  howpublished = {\url{https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/linq/}},
  year         = {2017}
}

% JSON
@misc{json,
  organization = {{Internet Engineering Task Force (IETF)}},
  title        = {{The JavaScript Object Notation (JSON) Data Interchange Format}},
  author       = {{T. Bray}},
  language     = {English},
  howpublished = {\url{https://www.ecma-international.org/publications-and-standards/standards/ecma-404/}},
  year         = {2013},
  abstract     = {JavaScript Object Notation (JSON) is a lightweight, text-based,
   language-independent data interchange format.  It was derived from
   the ECMAScript Programming Language Standard.  JSON defines a small
   set of formatting rules for the portable representation of structured
   data.

   This document removes inconsistencies with other specifications of
   JSON, repairs specification errors, and offers experience-based
   interoperability guidance.}
}

% SQL Server
@misc{mssql,
  title        = {{Microsoft SQL Server}},
  author       = {{Microsoft}},
  howpublished = {\url{https://www.microsoft.com/it-it/sql-server?rtc=1}},
  year         = {2021}
}

% SQLite
@misc{sqlite,
  title        = {{SQLite}},
  author       = {{SQLite}},
  howpublished = {\url{https://sqlite.org/index.html}},
  year         = {2021}
}

% IoC
@misc{ioc,
  title        = {{Designing Reusable Classes}},
  author       = {{Ralph E. Johnson, Brian Foote}},
  howpublished = {\url{http://www.laputan.org/drc/drc.html}},
  year         = {1988}
}

% Unit of Work
@misc{uow,
  title        = {{Unit of Work}},
  author       = {{Martin Fowler}},
  howpublished = {\url{https://martinfowler.com/eaaCatalog/unitOfWork.html}},
  year         = {2010}
}

% Visual Studio
@misc{visualstudio,
  title        = {{Visual Studio}},
  author       = {{Microsoft}},
  howpublished = {\url{https://visualstudio.microsoft.com/it/}},
  year         = {2021}
}

% Visual Studio Code
@misc{vscode,
  title        = {{Visual Studio Code}},
  author       = {{Microsoft}},
  howpublished = {\url{https://github.com/microsoft/vscode}},
  year         = {2021}
}

% Nuget
@misc{nuget,
  title        = {{Nuget}},
  author       = {{Nuget org}},
  howpublished = {\url{https://www.nuget.org}},
  year         = {2021}
}

% Rational
@misc{rational,
  title        = {{Overview of Rational Team Concert}},
  author       = {{IBM}},
  howpublished = {\url{https://www.ibm.com/docs/en/elm/6.0.6.1?topic=capabilities-rational-team-concert}},
  year         = {2019}
}

% xUnit
@misc{xunit,
  title        = {{xUnit}},
  author       = {{.NET Foundation}},
  howpublished = {\url{https://xunit.net}},
  year         = {2021}
}

% Installshield
@misc{installshield,
  title        = {{InstallShield}},
  author       = {{Revenera}},
  howpublished = {\url{https://www.revenera.com/install/products/installshield.html}},
  year         = {2021}
}

% Code First
@misc{codefirst,
  title        = {{Code First to a New Database}},
  author       = {{Microsoft}},
  howpublished = {\url{https://docs.microsoft.com/en-us/ef/ef6/modeling/code-first/workflows/new-database}},
  year         = {2016}
}

% Clean Code
@misc{cleancode,
  author       = {{Thang Chung}},
  title        = {{Clean Code concepts adapted for .NET/.NET Core}},
  howpublished = {\url{https://github.com/thangchung/clean-code-dotnet}},
  year         = {2021}
}

@misc{roslyn,
  author       = {{Microsoft}},
  title        = {{Roslyn}},
  howpublished = {\url{https://github.com/dotnet/roslyn}},
  year         = {{2014}}
}

@misc{roslynanalyzers,
  author       = {{Alex Turner}},
  title        = {{C# and Visual Basic - Use Roslyn to Write a Live Code Analyzer for Your API}},
  howpublished = {\url{https://docs.microsoft.com/en-us/archive/msdn-magazine/2014/special-issue/csharp-and-visual-basic-use-roslyn-to-write-a-live-code-analyzer-for-your-api}},
  year         = {{2014}}
}

@misc{editorconfig,
  author       = {{Hong Xu, Trey Hunner, Frank Fesevur}},
  title        = {{EditorConfig}},
  howpublished = {\url{https://editorconfig.org/}},
  year         = {2021}
}

% UUID
@misc{uuid,
  organization = {{International Telecommunication Union (ITU)}},
  title        = {{ITU-T X.667}},
  author       = {{ITU}},
  language     = {English},
  howpublished = {\url{http://handle.itu.int/11.1002/1000/11746}},
  year         = {2012},
  abstract     = {Recommendation ITU-T X.667 | ISO/IEC 9834-8 specifies procedures for the generation of universally unique identifiers (UUIDs) and for their use in the international object identifier tree under the joint UUID arc.}
}

% CallerMemberName
@misc{callermembername,
  title        = {{CallerMemberNameAttribute Class}},
  author       = {{Microsoft}},
  howpublished = {\url{https://docs.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices}},
  year         = {2021}
}

% DbContext
@misc{dbcontext,
  title        = {{DbContext Lifetime, Configuration, and Initialization}},
  author       = {{Microsoft}},
  howpublished = {\url{https://docs.microsoft.com/en-us/ef/core/dbcontext-configuration/}},
  year         = {2021}
}

% Migrations
@misc{migrations,
  title        = {{Migrations Overview}},
  author       = {{Microsoft}},
  howpublished = {\url{https://docs.microsoft.com/en-us/ef/core/managing-schemas/migrations}},
  year         = {2021}
}

% BackgroundService
@misc{backgroundservice,
  title        = {{Background tasks with hosted services in ASP.NET Core}},
  author       = {{Microsoft}},
  howpublished = {\url{https://docs.microsoft.com/en-us/aspnet/core/fundamentals/host/hosted-services}},
  year         = {2021}
}

% MessagePack
@misc{messagepack,
  title        = {{MessagePack specification}},
  howpublished = {\url{https://github.com/msgpack/msgpack/blob/master/spec.md}}
}

@misc{protobuf,
  author       = {{Google}},
  title        = {{Protocol Buffers - Google's data interchange format}},
  howpublished = {\url{https://github.com/protocolbuffers/protobuf}}
}


